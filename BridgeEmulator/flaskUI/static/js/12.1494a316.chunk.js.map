{"version":3,"sources":["containers/Device.js","views/Devices.js","containers/Flash.js"],"names":["Device","api_key","id","device","setType","setMessage","deleteDevice","axios","delete","then","fetchedData","console","log","data","catch","error","className","type","defaultChecked","onChange","e","state","currentTarget","checked","put","battery","title","batteryLevel","onClick","confirmAlert","message","buttons","label","Devices","API_KEY","useState","devices","setDevices","fetchDevices","undefined","get","useEffect","interval","setInterval","clearInterval","Flash","duration","Object","entries","map","persistOnHover"],"mappings":"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","file":"static/js/12.1494a316.chunk.js","sourcesContent":["import { MdDeleteForever, MdSystemUpdate } from \"react-icons/md\";\nimport { TiBatteryLow, TiBatteryMid, TiBatteryHigh, TiBatteryFull } from \"react-icons/ti\";\n\nimport axios from \"axios\";\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\n\nconst Device = ({api_key, id, device, setType, setMessage}) => {\n\n\n  const deleteAlert = () => {\n    confirmAlert({\n      title: 'Delete device ' + device['name'],\n      message: 'Are you sure to do this?',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => deleteDevice()\n        },\n        {\n          label: 'No'\n        }\n      ]\n    });\n  };\n\n  const deleteDevice = () => {\n    axios.delete(`/api/${api_key}/sensors/${id}`)\n    .then((fetchedData) => {\n      console.log(fetchedData.data);\n      setMessage('Device successfully deleted');\n      setType('none');\n      setType('success');\n    }).catch((error) => {\n      console.error(error)\n      setMessage('Error occured, check browser console');\n      setType('none');\n      setType('error');\n    });\n  }\n\n  const toggleDevice = (state) => {\n    axios.put(`/api/${api_key}/sensors/${id}/config`, {\"on\": state})\n    .then((fetchedData) => {\n      console.log(fetchedData.data);\n      setMessage('Device successfully ' + (state? 'enabled' : 'disabled'));\n      setType('none');\n      setType('success');\n    }).catch((error) => {\n      console.error(error)\n      setMessage('Error occured, check browser console');\n      setType('none');\n      setType('error');\n    });\n  }\n\n  const batteryLevel = () => {\n    let battery = device[\"config\"][\"battery\"];\n    console.log(battery)\n    if (battery > 90) {\n      return <TiBatteryFull title={battery + '%'}/>\n    } else if (battery > 70) {\n      return <TiBatteryHigh title={battery + '%'}/>\n    } else if (battery > 40) {\n      return <TiBatteryMid title={battery + '%'}/>\n    } else {\n      return <TiBatteryLow title={battery + '%'}/>\n    }\n  }\n\n  return (\n    <>\n    {device[\"name\"]} <br/>\n    <div className=\"switchContainer\">\n      <label className=\"switch\">\n        <input type=\"checkbox\"\n          defaultChecked={device['config']['on']}\n          onChange={(e) => toggleDevice(e.currentTarget.checked)}\n        />\n        <span className=\"slider\"></span>\n      </label>\n    </div>\n     Protocol: {device[\"protocol\"]}<br/>\n     {\"battery\" in device[\"config\"] && batteryLevel()}\n    <MdDeleteForever title='Delete' onClick={() => deleteAlert()}/>\n    <br/><br/>\n    </>\n  )\n}\n\nexport default Device\n","import { useState, useEffect } from 'react'\nimport axios from \"axios\";\nimport Device from \"../containers/Device\";\nimport Flash from \"../containers/Flash\"\n\nconst Devices = ({ API_KEY }) => {\n  const [devices, setDevices] = useState({});\n  const [type, setType] = useState('none');\n  const [message, setMessage] = useState('no message');\n\n  const fetchDevices = () => {\n    if (API_KEY !== undefined ) {\n      axios\n      .get(`/sensors`)\n      .then((fetchedData) => {\n        console.log(fetchedData.data);\n        setDevices(fetchedData.data);\n      }).catch((error) => {console.error(error)});\n    }\n  }\n\n  useEffect(() => {\n    fetchDevices();\n    const interval = setInterval(() => {\n      fetchDevices();\n    }, 2000); // <<-- ⏱ 1000ms = 1s\n    return () => clearInterval(interval);\n  }, [API_KEY]);\n\n  return (\n    <div className=\"content\">\n      {type !== 'none' && <Flash type={type} message={message} duration=\"5000\" setType={setType} />}\n      <div className=\"cardGrid\">\n        {Object.entries(devices).map(([id, device]) => (\n            <Device\n              key={id}\n              api_key={API_KEY}\n              id={id}\n              device={device}\n              setType={setType}\n              setMessage={setMessage}\n            />\n        ))}\n        </div>\n      </div>\n    );\n  }\n\n\nexport default Devices","import { useState } from \"react\";\nimport { FaTimes } from \"react-icons/fa\";\nimport FlashMessage from 'react-flash-message'\n\nexport default function Flash({type, message, duration, setType}) {\n\n    return (\n        <FlashMessage duration={duration} persistOnHover={true}>\n        <div className=\"notificationContainer\">\n            <div className={`notification success`}><p>{message}</p><div className=\"icon\"><FaTimes onClick={() => setType('none')}/></div></div>\n        </div>\n        </FlashMessage>\n    );\n    }\n"],"sourceRoot":""}